#include <DFRobot_DHT11.h>
#include <SoftwareSerial.h>
#include <Servo.h>  // 문 제어용 서보모터

SoftwareSerial btSerial(10, 11); // 블루투스 통신용 소프트웨어 시리얼

// 제어 핀 정의
const int ledPin = 3;             // PWM - 조명 밝기 제어
const int motorIn1 = 2;           // 방향 고정 핀
const int motorIn2 = 4;
const int motorPin = 5;           // PWM - 선풍기 속도 제어
const int submotorPin = 6;        // PWM - 자동문 개폐 장치
const int buzzerPin = 9;          // PWM - 경보기

// 서보모터 객체 생성
Servo doorServo;

// 센서 전원 공급 핀
const int sensorPowerPin = A4;    

// 센서 제어 핀 (디지털 출력) 트랜지스터 사용
const int lightSensorControlPin = 12;  // 조도 센서 제어
const int tempSensorControlPin = 7;   // 온습도 센서 제어
const int flameSensorControlPin = 8;  // 화염 센서 제어

// 센서 입력 핀 (아날로그 입력)
const int flameSensorInputPin = 13;
const int tempSensorInputPin = A2;
const int lightSensorInputPin = A3;

// 1~5 단계 숫자를 PWM 값(0~255)으로 변환 (20%,40%,60%,80%,100%)
int mapLevelToPWM(int level) {
  level = constrain(level, 1, 5);
  return map(level, 1, 5, 51, 255);  // 51 ≈ 20% of 255
}

// 센서 활성 상태 저장
bool isLightSensorOn = false;
bool isTempSensorOn = false;
bool isFlameSensorOn = false;

void setup() {
  Serial.begin(9600);
  btSerial.begin(9600);

  pinMode(ledPin, OUTPUT);
  pinMode(motorPin, OUTPUT);
  pinMode(motorIn1, OUTPUT);
  pinMode(motorIn2, OUTPUT);
  pinMode(submotorPin, OUTPUT);
  pinMode(buzzerPin, OUTPUT);

  pinMode(lightSensorControlPin, OUTPUT);
  pinMode(tempSensorControlPin, OUTPUT);
  pinMode(flameSensorControlPin, OUTPUT);
  pinMode(flameSensorInputPin, INPUT);

  digitalWrite(lightSensorControlPin, LOW);
  digitalWrite(tempSensorControlPin, LOW);
  digitalWrite(flameSensorControlPin, LOW);

  doorServo.attach(submotorPin);  // 서보 모터 연결
  doorServo.write(105); 
  Serial.println("시리얼 모니터 또는 블루투스로 명령어를 입력할 수 있습니다.");
  delay(5000);
  Serial.println("준비 완료: 대상, 행동, 추가 지정사항의 형식으로 입력하세요.");

}

void loop() {
  checkBluetoothAndSerial();
  sensorControlLoop();
  delay(3000); // 센서 읽기 주기
}

void checkBluetoothAndSerial() {
  String input = "";

  if (btSerial.available()) {
    input = btSerial.readStringUntil('\n');
  }
  else if (Serial.available()) {
    input = Serial.readStringUntil('\n');
  }
  else {
    return;
  }

  input.trim();
  if (input.length() == 0) return;

  Serial.println("입력된 명령: " + input);

  input.replace(",", " ");
  input.trim();
  while (input.indexOf("  ") != -1) input.replace("  ", " ");

  int firstSpace = input.indexOf(' ');
  int secondSpace = input.indexOf(' ', firstSpace + 1);

  if (firstSpace == -1) {
    Serial.println("잘못된 형식: 최소한 '대상 행동'이 필요합니다.");
    return;
  }

  String target = input.substring(0, firstSpace);
  String action = "";
  String param = "";

  if (secondSpace == -1) {
    action = input.substring(firstSpace + 1);
  } else {
    action = input.substring(firstSpace + 1, secondSpace);
    param = input.substring(secondSpace + 1);
  }

  target.trim();  target.toLowerCase();
  action.trim();  action.toLowerCase();
  param.trim();   param.toLowerCase();

  handleCommand(target, action, param);

  Serial.println("실행된 명령: " + target + ", " + action + ", " + param);
}

void handleAnalogCommand(int pin, String action, String param, String name) {
  if (action == "on") {
    int level = param.toInt();
    if (level < 1 || level > 5) {
      Serial.println(name + " 단계가 지정되지 않았거나 잘못되었습니다. 기본값 1단계로 실행합니다.");
      level = 1;
    }
    int pwm = mapLevelToPWM(level);
    if(name == "모터") {
      digitalWrite(motorIn1, HIGH);
      digitalWrite(motorIn2, LOW);
      digitalWrite(pin, pwm);
    } else {
      digitalWrite(pin, pwm); // LED, 부저, 서브모터 등은 PWM 출력만 하면 됨
    }
    Serial.println(name + " ON: 단계 " + String(level) + " (PWM " + String(pwm) + ")");
  }
  else if (action == "off") {
    analogWrite(pin, 0);
    Serial.println(name + " OFF");
  }
  else {
    Serial.println("알 수 없는 " + name + " 동작: " + action);
  }
}

void handleCommand(String target, String action, String param) {
  if (target == "led") {
    handleAnalogCommand(ledPin, action, param, "LED");
  }
  else if (target == "모터") {
    handleAnalogCommand(motorPin, action, param, "모터");
  }
  else if (target == "서브모터") {
    if (action == "on") {
      doorServo.write(105);  // 문 닫기
      Serial.println("문 열림 (105도)");
    } 
    else if (action == "off") {
      doorServo.write(10);   // 문 열기
      Serial.println("문 닫힘 (10도)");
    } 
    else {
      Serial.println("알 수 없는 서브모터 동작: " + action);
    }
  }
  else if (target == "센서") {
    if (param != "조도" && param != "온습도" && param != "화염") {
      Serial.println("알 수 없는 센서 종류: " + param);
      return;
    }

    if (action == "on") {
      if (param == "조도") {
        digitalWrite(lightSensorControlPin, HIGH);
        isLightSensorOn = true;
        Serial.println("조도 센서 ON");
      } 
      else if (param == "온습도") {
        digitalWrite(tempSensorControlPin, HIGH);
        isTempSensorOn = true;
        Serial.println("온습도 센서 ON");
      } 
      else if (param == "화염") {
        digitalWrite(flameSensorControlPin, HIGH);
        isFlameSensorOn = true;
        Serial.println("화염 센서 ON");
      }
    }
    else if (action == "off") {
      if (param == "조도") {
        digitalWrite(lightSensorControlPin, LOW);
        isLightSensorOn = false;
        Serial.println("조도 센서 OFF");
        analogWrite(ledPin, 0);
      } 
      else if (param == "온습도") {
        digitalWrite(tempSensorControlPin, LOW);
        isTempSensorOn = false;
        Serial.println("온습도 센서 OFF");
        analogWrite(motorPin, 0);
      } 
      else if (param == "화염") {
        digitalWrite(flameSensorControlPin, LOW);
        isFlameSensorOn = false;
        Serial.println("화염 센서 OFF");
        analogWrite(buzzerPin, 0);
      }
    }
    else {
      Serial.println("알 수 없는 센서 동작: " + action);
    }
  }
  else {
    Serial.println("알 수 없는 대상: " + target);
  }
}
// 센서 활성 시 동작 처리
void sensorControlLoop() {
if (isFlameSensorOn) {
  bool flameDetected = digitalRead(flameSensorInputPin) == LOW; // LOW일 때 화염 감지됨
if (flameDetected) {
  tone(buzzerPin, 1000);  // 1kHz 경고음
  Serial.println("화염 감지됨!");
} else {
  noTone(buzzerPin);
  Serial.println("화염 없음.");
}
}

  if (isLightSensorOn) {
    int lightValue = analogRead(lightSensorInputPin);
    if (lightValue < 500) {
      analogWrite(ledPin, mapLevelToPWM(2));
      Serial.println("조도 낮음(" + String(lightValue) + ") LED 2단계 ON");
    } else {
      analogWrite(ledPin, 0);
      Serial.println("조도 (" + String(lightValue) + ")");
    }
  }

  if (isTempSensorOn) {
    int tempRaw = analogRead(tempSensorInputPin);
    float tempC = tempRaw * 100.0 / 1023.0;
    if (tempC >= 30.0) {
      int pwm = mapLevelToPWM(2);
      digitalWrite(motorIn1, HIGH);
      digitalWrite(motorIn2, LOW); 
      digitalWrite(motorPin, pwm);
      Serial.println("온도 높음(" + String(tempC, 1) + "°C) 모터 2단계 ON");
    } else {
      analogWrite(motorPin, 0);
    }
  }
}